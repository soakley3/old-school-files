{\rtf1\ansi\ansicpg1252\cocoartf2509
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red34\green45\blue53;\red242\green242\blue242;}
{\*\expandedcolortbl;;\cssrgb\c17647\c23137\c27059;\cssrgb\c96078\c96078\c96078;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 using the given 
\f1\fs18 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 *buildImageTree \
\
\
\
\

\f0\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 createRoot(int x, y)  - these values will be called to create the *root object. This protects the value within the class.\
\
add(int x, y) - this will connect a a new KdTreeElement<int, int> to the root value, and add 1 to the index so that there is no overlap. \
\
draw() - this will print the globally accessible ColorRegion, so that we can see it in bridges.\
\
\
\
int Partition_Region() 0- this will create the visible partition bounds that will be calculated by the CalculateRegion function\
\
CalculateRegion() - determines which areas, based on the bounds of each object under the *root object, and pass the values into the Partition_Region function. \
\
homogeneous - lambda(?) function that determines if nearing regions colours are too closely resembled for the human eye.}